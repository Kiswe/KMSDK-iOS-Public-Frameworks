// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import CoreMedia;
@import CoreGraphics;
@import UIKit;
@import KiswePlaybackControls;
@import AVFoundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSDateFormatter (SWIFT_EXTENSION(KMSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSDateFormatter * _Nonnull kisweFormat;)
+ (NSDateFormatter * _Nonnull)kisweFormat;
@end


SWIFT_CLASS("_TtC5KMSDK5Event")
@interface Event : NSObject
@property (nonatomic, copy) NSString * _Nullable eventID;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable dataUrl;
@property (nonatomic, copy) NSString * _Nullable diaginfoInterval;
@property (nonatomic, copy) NSString * _Nullable mediaServerP;
@property (nonatomic, copy) NSString * _Nullable mediaServerS;
@property (nonatomic, copy) NSString * _Nullable opstatus;
@property (nonatomic, copy) NSString * _Nullable shareUrl;
@property (nonatomic, copy) NSString * _Nullable visibility;
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable widgets;
@property (nonatomic, copy) NSString * _Nullable ownedBy;
@property (nonatomic, copy) NSString * _Nullable thumbnail;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable originalEventDict;
@property (nonatomic, copy) NSDate * _Nullable startTime;
@property (nonatomic, copy) NSString * _Nullable channelID;
@property (nonatomic, copy) NSDate * _Nullable videoStartTime;
@property (nonatomic) BOOL togglePlaybackControlsWidget;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable currentStreamsDict;
@property (nonatomic, copy) NSArray * _Nullable streams;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
+ (Event * _Nonnull)eventWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
+ (NSArray<Event *> * _Nonnull)eventsWithArray:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)array;
- (NSString * _Nullable)getVideoSrcFromVideosArrayWithId:(NSInteger)sourceId;
- (NSString * _Nullable)getVideoSrcFromClickablesWithClickableId:(NSInteger)sourceID;
- (NSString * _Nullable)clickableTypeForClickableId:(NSInteger)sourceID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class AVPlayer;

SWIFT_CLASS("_TtC5KMSDK18KMAVPlayerObserver")
@interface KMAVPlayerObserver : NSObject
@property (nonatomic, strong) AVPlayer * _Nullable mediaPlayer;
@property (nonatomic) BOOL observing;
- (nonnull instancetype)initWithPlayer:(AVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)observe;
- (void)attachPeriodicObserverForInterval:(CMTime)interval;
- (void)removePeriodicTimeObserver;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5KMSDK20KMLocalizationHelper")
@interface KMLocalizationHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (void)setLocalization:(NSString * _Nonnull)localization;
+ (NSString * _Nonnull)localizedString:(NSString * _Nonnull)string;
@end

@class AVPlayerItem;
@class UIView;

SWIFT_CLASS("_TtC5KMSDK19KMMediaPlayerHelper")
@interface KMMediaPlayerHelper : NSObject
+ (NSString * _Nullable)initialPlaylistStringForEvent:(Event * _Nonnull)event SWIFT_METHOD_FAMILY(none);
+ (NSString * _Nullable)initialStreamForEvent:(Event * _Nonnull)event SWIFT_METHOD_FAMILY(none);
+ (NSString * _Nullable)playlistStringForVideoName:(NSString * _Nonnull)name event:(Event * _Nonnull)event;
+ (NSString * _Nullable)highVariantPlaylistStringForVideoName:(NSString * _Nonnull)name event:(Event * _Nonnull)event;
+ (NSString * _Nullable)lowVariantPlaylistStringForVideoName:(NSString * _Nonnull)name event:(Event * _Nonnull)event;
+ (NSString * _Nullable)vodHighVariantPlaylistStringForVideoName:(NSString * _Nonnull)name event:(Event * _Nonnull)event;
+ (NSString * _Nullable)vodLowVariantPlaylistStringForVideoName:(NSString * _Nonnull)name event:(Event * _Nonnull)event;
+ (NSString * _Nullable)requestedStreamIdFromFullURL:(NSURL * _Nonnull)url;
+ (NSString * _Nullable)currentVideoURLForPlayerItem:(AVPlayerItem * _Nonnull)playerItem;
+ (BOOL)urlIsMixStream:(NSURL * _Nonnull)url;
+ (NSURL * _Nullable)mixURLFromVideoURL:(NSURL * _Nonnull)url;
+ (NSURL * _Nullable)videoURLFromMixURL:(NSURL * _Nonnull)url;
+ (NSString * _Nullable)videoNameFromURL:(NSURL * _Nonnull)url;
+ (CGRect)videoRectInPlayerView:(UIView * _Nonnull)playerView;
/**
  Set the shared AVAudioSession instance category.
  \param category String representing category (AVAudioSessionCategoryPlayback, AVAudioSessionCategoryAmbient, â€¦)

*/
+ (void)setAudioSessionCategory:(NSString * _Nonnull)category;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KMPlayerView;
@class TKPlayerControlsView;
@class TKMediaPlayerObserver;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC5KMSDK21KMMediaViewController")
@interface KMMediaViewController : UIViewController
- (nonnull instancetype)initWithEvent:(Event * _Nonnull)event loggingUsernameProducer:(NSString * _Nonnull (^ _Nonnull)(void))loggingUsernameProducer tokenProducer:(NSString * _Nonnull (^ _Nullable)(void))tokenProducer;
@property (nonatomic, strong) Event * _Nullable event;
@property (nonatomic, strong) KMPlayerView * _Nullable playerView;
@property (nonatomic, strong) KMPlayerView * _Nullable alternatePlayerView;
@property (nonatomic, readonly) BOOL shouldUseRealTimeArchive;
@property (nonatomic, strong) TKPlayerControlsView * _Nonnull playerControls;
@property (nonatomic) BOOL playerControlsIdleTimerEnabled;
@property (nonatomic) double playerControlsDefaultIdleTimeSeconds;
@property (nonatomic) CMTime playerSeekTolerance;
@property (nonatomic, strong) KMAVPlayerObserver * _Nullable observer;
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable loggingUsernameProducer)(void);
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable overlayWidgetToken)(void);
@property (nonatomic, strong) TKMediaPlayerObserver * _Nullable metadataObserver;
@property (nonatomic) BOOL overlayWidgetsEnabled;
@property (nonatomic) UIStatusBarStyle playerPreferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
- (void)playerObserver:(KMAVPlayerObserver * _Nonnull)observer periodicTimeObserverObservedPlayer:(AVPlayer * _Nonnull)player;
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
- (void)showAlternatePlayerWithPath:(NSString * _Nullable)path;
- (void)dismissAlternatePlayer;
@end

@protocol UIViewControllerTransitionCoordinator;

@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
- (void)resetIdleTimer;
- (void)stopIdleTimer;
@end


SWIFT_PROTOCOL("_TtP5KMSDK17VideoControllable_")
@protocol VideoControllable
/**
  Current video time in seconds
*/
@property (nonatomic, copy) NSString * _Nullable playhead;
/**
  Current stream name
*/
@property (nonatomic, copy) NSString * _Nullable stream;
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK)) <VideoControllable>
@property (nonatomic, copy) NSString * _Nullable playhead;
@property (nonatomic, copy) NSString * _Nullable stream;
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
- (void)pauseVideo;
- (void)playVideo;
- (void)seekLiveWithCompletion:(void (^ _Nullable)(void))completion;
- (void)reloadVideoWithSeekToCurrentTime:(BOOL)seekToCurrentTime;
- (void)setStreamWithNamed:(NSString * _Nonnull)name;
- (void)setPlayheadTo:(double)timeInSeconds;
- (void)togglePlaybackControls;
+ (CMTime)endTimeForPlayerItem:(AVPlayerItem * _Nonnull)item;
- (CMTime)liveSeekableTimeForPlayer;
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
- (void)postMediaPlayerShouldReloadNotification;
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK)) <TKPlayerControlsViewDelegate>
- (void)controlsViewDidPressBack:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewDidPressPlay:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewDidPressPause:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewDidPressGoLive:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewDidPressSkipBack:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewDidPressSkipForward:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewWillHideControls:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewWillShowControls:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsView:(TKPlayerControlsView * _Null_unspecified)controlsView sliderDidBeginDraggingAtValue:(float)value;
- (void)controlsView:(TKPlayerControlsView * _Null_unspecified)controlsView sliderDidEndDraggingAtValue:(float)value;
- (void)controlsView:(TKPlayerControlsView * _Null_unspecified)controlsView sliderValueDidChange:(float)value;
- (void)controlsViewDidPressPipToggleHidePips:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewDidPressPipToggleShowPips:(TKPlayerControlsView * _Null_unspecified)controlsView;
- (void)controlsViewDidPressRotate:(TKPlayerControlsView * _Null_unspecified)controlsView;
@end

@class UIGestureRecognizer;

@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
- (void)playerView:(KMPlayerView * _Nonnull)playerView didObserveItemStatus:(AVPlayerItemStatus)status;
- (void)playerViewDidPlayToEndTimeWithPlayerView:(KMPlayerView * _Nonnull)playerView;
- (void)playerView:(KMPlayerView * _Nonnull)playerView didReceiveTap:(UIGestureRecognizer * _Nonnull)sender;
- (void)playerView:(KMPlayerView * _Nonnull)playerView didReceiveTapAt:(CGPoint)location;
@end


@interface KMMediaViewController (SWIFT_EXTENSION(KMSDK))
- (void)loadOrRepositionOverlayWidgets;
- (void)clearOverlayWidgets;
- (void)hideOrShowOverlayWidgetsForCurrentStream;
- (void)hideAllOverlayWidgets;
- (void)reloadWidgetWebviews;
- (void)removeAllWebviewConstraints;
@end

@class CALayer;
@protocol AVAssetResourceLoaderDelegate;

SWIFT_CLASS("_TtC5KMSDK12KMPlayerView")
@interface KMPlayerView : UIView
@property (nonatomic, strong) CALayer * _Nonnull slateLayer;
@property (nonatomic, strong) UIView * _Nonnull videoRectView;
@property (nonatomic, strong) AVPlayer * _Nullable player;
@property (nonatomic, strong) id <AVAssetResourceLoaderDelegate> _Nullable resourceLoaderDelegate;
@property (nonatomic) UIActivityIndicatorViewStyle activityIndicatorStyle;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass;
- (void)layoutSubviews;
- (void)playWithURL:(NSURL * _Nonnull)URL completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)showSpinner;
- (void)stopSpinner;
- (void)slatePlayerView;
- (void)unslatePlayerView;
- (void)resetPlayer;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_CLASS("_TtC5KMSDK5KMSDK")
@interface KMSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KMSDK * _Nonnull shared;)
+ (KMSDK * _Nonnull)shared;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface KMSDK (SWIFT_EXTENSION(KMSDK))
/**
  Sets token for Kiswe API
*/
- (void)setAPIToken:(NSString * _Nonnull)token;
@end


@interface KMSDK (SWIFT_EXTENSION(KMSDK))
- (void)mediaPlayerControllerWithEventId:(NSString * _Nonnull)eventId completion:(void (^ _Nonnull)(KMMediaViewController * _Nullable))completion;
- (KMMediaViewController * _Nonnull)mediaPlayerControllerWithEventDict:(NSDictionary<NSString *, id> * _Nonnull)eventDict;
- (KMMediaViewController * _Nonnull)mediaPlayerControllerWithEvent:(Event * _Nonnull)event;
@end

@class NSNumber;

SWIFT_CLASS("_TtC5KMSDK15KMWidgetContext")
@interface KMWidgetContext : NSObject
+ (NSDictionary<NSString *, id> * _Nonnull)getContext;
+ (void)setContext:(NSDictionary<NSString *, id> * _Nonnull)context;
+ (void)setPlayer:(AVPlayer * _Nonnull)player;
+ (void)setMetadataObserver:(TKMediaPlayerObserver * _Nonnull)observer;
+ (void)resetContext;
+ (AVPlayer * _Nullable)getCurrentPlayer;
+ (CMTime)currentPlayerTime;
+ (NSNumber * _Nullable)currentPlayerEpoch;
+ (NSURL * _Nullable)currentPlayerURL;
+ (NSString * _Nullable)currentPlayerCurrentStreamName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class NSValue;

SWIFT_CLASS("_TtC5KMSDK12RectMaskView")
@interface RectMaskView : NSObject
/**
  Color of fill (outer) rect
*/
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/**
  Radius of fill (outer) rect
*/
@property (nonatomic) CGFloat radius;
/**
  Opacity of fill (outer) rect
*/
@property (nonatomic) float opacity;
/**
  Padding around filled (outer) Rect
*/
@property (nonatomic) CGFloat padding;
/**
  Indicates if we should animate adding and removing the fillLayer. Default is \code
  true
  \endcode.
*/
@property (nonatomic) BOOL animated;
/**
  Animation duration. Default is \code
  0.2
  \endcode.
*/
@property (nonatomic) double animationDuration;
/**
  Insets for filled (outer) rect
  note:
  If you need the edges to be non-uniform this is the property to set.
*/
@property (nonatomic) UIEdgeInsets insets;
- (nonnull instancetype)initWithDrawIn:(UIView * _Nonnull)drawIn maskRects:(NSArray<NSValue *> * _Nonnull)maskRects referenceFrame:(CGRect)referenceFrame OBJC_DESIGNATED_INITIALIZER;
/**
  Draw a rect mask on a target view with cutouts
*/
- (void)draw;
/**
  Remove the rect mask view layer
*/
- (void)remove;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5KMSDK20TKInterfaceUtilities")
@interface TKInterfaceUtilities : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIView (SWIFT_EXTENSION(KMSDK))
@end


#pragma clang diagnostic pop
